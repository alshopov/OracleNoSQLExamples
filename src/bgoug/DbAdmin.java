/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package bgoug;  
@SuppressWarnings("all")
public class DbAdmin extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DbAdmin\",\"namespace\":\"bgoug\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"NONE\"},{\"name\":\"age\",\"type\":\"int\",\"default\":\"NONE\"},{\"name\":\"db\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"Oracle RDBMS\"}]}");
  @Deprecated public java.lang.String name;
  @Deprecated public int age;
  @Deprecated public java.lang.String db;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return age;
    case 2: return db;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: age = (java.lang.Integer)value$; break;
    case 2: db = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'db' field.
   */
  public java.lang.String getDb() {
    return db;
  }

  /**
   * Sets the value of the 'db' field.
   * @param value the value to set.
   */
  public void setDb(java.lang.String value) {
    this.db = value;
  }

  /** Creates a new DbAdmin RecordBuilder */
  public static bgoug.DbAdmin.Builder newBuilder() {
    return new bgoug.DbAdmin.Builder();
  }
  
  /** Creates a new DbAdmin RecordBuilder by copying an existing Builder */
  public static bgoug.DbAdmin.Builder newBuilder(bgoug.DbAdmin.Builder other) {
    return new bgoug.DbAdmin.Builder(other);
  }
  
  /** Creates a new DbAdmin RecordBuilder by copying an existing DbAdmin instance */
  public static bgoug.DbAdmin.Builder newBuilder(bgoug.DbAdmin other) {
    return new bgoug.DbAdmin.Builder(other);
  }
  
  /**
   * RecordBuilder for DbAdmin instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DbAdmin>
    implements org.apache.avro.data.RecordBuilder<DbAdmin> {

    private java.lang.String name;
    private int age;
    private java.lang.String db;

    /** Creates a new Builder */
    private Builder() {
      super(bgoug.DbAdmin.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(bgoug.DbAdmin.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing DbAdmin instance */
    private Builder(bgoug.DbAdmin other) {
            super(bgoug.DbAdmin.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = (java.lang.String) data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.db)) {
        this.db = (java.lang.String) data().deepCopy(fields()[2].schema(), other.db);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public bgoug.DbAdmin.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public bgoug.DbAdmin.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'age' field */
    public java.lang.Integer getAge() {
      return age;
    }
    
    /** Sets the value of the 'age' field */
    public bgoug.DbAdmin.Builder setAge(int value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'age' field */
    public bgoug.DbAdmin.Builder clearAge() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'db' field */
    public java.lang.String getDb() {
      return db;
    }
    
    /** Sets the value of the 'db' field */
    public bgoug.DbAdmin.Builder setDb(java.lang.String value) {
      validate(fields()[2], value);
      this.db = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'db' field has been set */
    public boolean hasDb() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'db' field */
    public bgoug.DbAdmin.Builder clearDb() {
      db = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public DbAdmin build() {
      try {
        DbAdmin record = new DbAdmin();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
        record.db = fieldSetFlags()[2] ? this.db : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
